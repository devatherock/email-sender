docker_auth: &docker_auth
  auth:
    username: $DOCKER_USERNAME
    password: $DOCKER_PASSWORD

slack_image: &slack_image
  docker:
    - image: devatherock/simple-slack:1.0.0
      <<: *docker_auth

work_directory: &work_directory
  working_directory: ~/email-sender

resource_class: &resource_class
  resource_class: small

release_filter: &release_filter
  filters:
    branches:
      only: non-existent-branch
    tags:
      only: /^v[0-9\.]+$/

pr_filter: &pr_filter
  filters:
    branches:
      ignore: master

orbs:
  templates: devatherock/circleci-templates@0.4.0

parameters:
  repo_name:
    type: string
    default: "email-sender"

executors:
  jdk-executor:
    docker:
      - image: cimg/openjdk:21.0
        <<: *docker_auth
    <<: *resource_class
    <<: *work_directory
  machine-executor:
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: medium
    <<: *work_directory
  arm-executor:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
    <<: *work_directory

version: 2.1
jobs:
  test:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/email-sender
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          ./gradlew check
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results

  build:
    executor: jdk-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/email-sender
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            - v1-dependencies
      - run: |
          ./gradlew build
          cp build/libs/email-sender-*.jar docker/
      - persist_to_workspace:
          root: ~/email-sender
          paths:
            - build
            - docker
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - store_artifacts:
          path: build/reports
      - store_test_results:
          path: build/test-results

  publish:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/email-sender
      - run:
          name: Build and push the docker image
          command: |
            TAG=${CIRCLE_SHA1:0:8}
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker buildx create --name rockbuilder \
              --driver docker-container --use --bootstrap
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              -t devatherock/email-sender:$TAG \
              -t devatherock/email-sender:latest \
              docker

  integration_test:
    parameters:
      runner:
        type: executor
    executor: << parameters.runner >>
    steps:
      - checkout
      - attach_workspace:
          at: ~/email-sender
      - restore_cache:
          keys:
            - v1-integration-{{ checksum "build.gradle" }}
            - v1-integration
      - run: |
          make integration-test embedded-integration-test
      - store_test_results:
          path: build/test-results
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-integration-{{ checksum "build.gradle" }}

  publish_release:
    executor: jdk-executor
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: ~/email-sender
      - run: |
          TAG=${CIRCLE_TAG#v}
          DEV_TAG=${CIRCLE_SHA1:0:8}
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker buildx create --name rockbuilder \
            --driver docker-container --use --bootstrap
          docker buildx imagetools create \
            -t devatherock/email-sender:$TAG devatherock/email-sender:$DEV_TAG

  deploy:
    executor: jdk-executor
    steps:
      - run:
          name: Trigger deployment to render.com
          command: |
            curl $RENDER_DEPLOY_HOOK

  notify:
    <<: *slack_image
    <<: *resource_class
    environment:
      TEXT: "Success: {{.CircleBuildUrl}} by {{.CircleUsername}}"
      CHANNEL: general
      TITLE: "Build completed"
    steps:
      - run: /bin/simpleslack -c "#33ad7f" || true

workflows:
  version: 2.1
  build_publish:
    jobs:
      - templates/yaml_validator:
          name: validate_yamls
          context:
            - docker-credentials
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          filters:
            branches:
              only: master
      - build:
          context:
            - docker-credentials
          requires:
            - validate_yamls
      - publish:
          context:
            - docker-credentials
          requires:
            - build
      - templates/dockerhub_readme_update:
          name: dockerhub_readme
          context:
            - docker-credentials
            - dockerhub-readme-credentials
          docker_image: '<< pipeline.parameters.repo_name >>'
          image_description: 'REST API to send emails'
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          requires:
            - publish
      - integration_test:
          name: integration_test_amd
          context:
            - docker-credentials
          runner: machine-executor
          requires:
            - publish
      - integration_test:
          name: integration_test_arm
          context:
            - docker-credentials
          runner: arm-executor
          requires:
            - dockerhub_readme
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          requires:
            - integration_test_amd
            - integration_test_arm

  release:
    jobs:
      - publish_release:
          context:
            - docker-credentials
          <<: *release_filter
      - deploy:
          context:
            - docker-credentials
          <<: *release_filter
          requires:
            - publish_release
      - notify:
          context:
            - docker-credentials
            - slack-webhook
          <<: *release_filter
          requires:
            - deploy

  pr_check:
    jobs:
      - templates/changelog_updater:
          name: changelog_updater
          context:
            - docker-credentials
            - changelog-updater-credentials
          <<: *pr_filter
      - templates/yaml_validator:
          name: validate_yamls
          context:
            - docker-credentials
          work_dir: '~/<< pipeline.parameters.repo_name >>'
          requires:
            - changelog_updater
      - test:
          context:
            - docker-credentials
          <<: *pr_filter
          requires:
            - validate_yamls
